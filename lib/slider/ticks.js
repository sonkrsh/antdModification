"use strict";"use client";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _typeof=require("@babel/runtime/helpers/typeof");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _react=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _HapticsContext=_interopRequireDefault(require("../provider/HapticsContext"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||_typeof(obj)!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}var Ticks=function Ticks(_ref){var points=_ref.points,max=_ref.max,min=_ref.min,upperBound=_ref.upperBound,lowerBound=_ref.lowerBound,styles=_ref.styles;var onHaptics=(0,_react.useContext)(_HapticsContext.default);var didmountRef=(0,_react.useRef)(false);(0,_react.useEffect)(function(){if(didmountRef.current){onHaptics('slider');}else{didmountRef.current=true;}},[upperBound,lowerBound,onHaptics]);var range=max-min;var elements=points.map(function(point){var offset="".concat(Math.abs(point-min)/range*100,"%");var isActived=point<=upperBound&&point>=lowerBound;var style={left:offset};return _react.default.createElement(_reactNative.View,{style:[styles.tick,isActived&&styles.tickActive,style],key:point});});return _react.default.createElement(_reactNative.View,{style:styles.ticks},elements);};var _default=Ticks;exports.default=_default;